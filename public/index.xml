<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wilmer Uruchi Blog</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content on Wilmer Uruchi Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Jun 2025 10:28:30 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Mystery of the Random Test Failures</title>
      <link>http://localhost:1313/blog/posts/random-test-failures-mystery/</link>
      <pubDate>Mon, 16 Jun 2025 10:28:30 +0200</pubDate>
      <guid>http://localhost:1313/blog/posts/random-test-failures-mystery/</guid>
      <description>&lt;p&gt;What happens when your test suite starts to throw some random unexpected results only when running locally that seem to increase or decrease depending on random circumstances? Some days you get higher chances of error, other days you have to try many times to get one. It seems that if you want to look at them they don&amp;rsquo;t show up, but when you need to actually test your code, there they are. Is it perhaps your lack of care for &lt;strong&gt;proper mocking&lt;/strong&gt; and &lt;strong&gt;cleaning up&lt;/strong&gt; after each test? It might be all those &lt;strong&gt;objects defined at the test file level&lt;/strong&gt; that are then mutated inside tests. No, it might be the &lt;strong&gt;debugger&lt;/strong&gt; you are attaching to the terminal. Is it the &lt;em&gt;node version&lt;/em&gt;? Or the fact that you are using &lt;code&gt;nvm&lt;/code&gt;. What if all the hints you get from your debugging effort tell you that the root cause is &lt;em&gt;something&lt;/em&gt; and the more you try to fix that &lt;em&gt;something&lt;/em&gt; the more it seems to break everything? Let me share with you a story about &lt;strong&gt;Software Development&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A GitLab pipeline that re-uses containers to achieve faster run times</title>
      <link>http://localhost:1313/blog/posts/ci-cd-pipeline-w-containers/</link>
      <pubDate>Mon, 20 May 2024 15:23:08 +0100</pubDate>
      <guid>http://localhost:1313/blog/posts/ci-cd-pipeline-w-containers/</guid>
      <description>&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;&#xA;&lt;p&gt;Continuos Integration and Continuos Deployment has become a necessary requirement in most (if not all) of our projects. We can get rid of many manual processes by building a pipeline in &lt;strong&gt;GitLab&lt;/strong&gt;, or similar tool, which runs through the usual steps: &lt;strong&gt;test&lt;/strong&gt;, &lt;strong&gt;build&lt;/strong&gt;, &lt;strong&gt;deploy&lt;/strong&gt;. However, these steps can involve redundant &lt;em&gt;automated&lt;/em&gt; actions, for example, the &lt;strong&gt;test&lt;/strong&gt; steps needs to install the necessary dependencies of the project to run, while the &lt;strong&gt;build&lt;/strong&gt; process might also need to install the same dependencies. In the case of &lt;code&gt;node_modules&lt;/code&gt;, these can be trivially shared between environments, but it might not be as simple for &lt;code&gt;python&lt;/code&gt; packages or other dependencies that are not as easily shared between pipeline steps or that require a large list of dependencies to be already present in the execution environment.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
